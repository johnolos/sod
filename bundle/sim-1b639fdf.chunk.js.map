{"version":3,"file":"sim-1b639fdf.chunk.js","sources":["../../../ui/hunter/inputs.ts","../../../ui/core/talents/hunter_pet.ts","../../../ui/hunter/presets.ts","../../../ui/hunter/sim.ts"],"sourcesContent":["import { ItemSlot, Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { TypedEvent } from '../core/typed_event.js';\nimport { makePetTypeInputConfig } from '../core/talents/hunter_pet.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tHunter_Rotation_RotationType as RotationType,\n\tHunter_Rotation_StingType as StingType,\n\tHunter_Options_Ammo as Ammo,\n\tHunter_Options_QuiverBonus as QuiverBonus,\n\tHunterRune,\n} from '../core/proto/hunter.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const WeaponAmmo = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, Ammo>({\n\tfieldName: 'ammo',\n\tnumColumns: 6,\n\tvalues: [\n\t\t{ value: Ammo.AmmoNone, tooltip: 'No Ammo' },\n\t\t{ actionId: ActionId.fromItemId(3030), value: Ammo.RazorArrow },\n\t\t{ actionId: ActionId.fromItemId(11285), value: Ammo.JaggedArrow },\n\t\t{ actionId: ActionId.fromItemId(19316), value: Ammo.IceThreadedArrow },\n\t\t{ actionId: ActionId.fromItemId(18042), value: Ammo.ThoriumHeadedArrow },\n\t\t{ actionId: ActionId.fromItemId(12654), value: Ammo.Doomshot },\n\t\t{ actionId: ActionId.fromItemId(3033), value: Ammo.SolidShot },\n\t\t{ actionId: ActionId.fromItemId(11284), value: Ammo.AccurateSlugs },\n\t\t{ actionId: ActionId.fromItemId(19317), value: Ammo.IceThreadedBullet },\n\t\t{ actionId: ActionId.fromItemId(10513), value: Ammo.MithrilGyroShot },\n\t\t{ actionId: ActionId.fromItemId(11630), value: Ammo.RockshardPellets },\n\t\t{ actionId: ActionId.fromItemId(15997), value: Ammo.ThoriumShells },\n\t\t{ actionId: ActionId.fromItemId(13377), value: Ammo.MiniatureCannonBalls },\n\t],\n});\n\nexport const QuiverInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, QuiverBonus>({\n\textraCssClasses: [\n\t\t'quiver-picker',\n\t],\n\tfieldName: 'quiverBonus',\n\tnumColumns: 2,\n\tvalues: [\n\t\t{ color: '82e89d', value: QuiverBonus.QuiverNone },\n\t\t{ actionId: ActionId.fromItemId(18714), value: QuiverBonus.Speed15 },\n\t\t{ actionId: ActionId.fromItemId(2662), value: QuiverBonus.Speed14 },\n\t\t{ actionId: ActionId.fromItemId(8217), value: QuiverBonus.Speed13 },\n\t\t{ actionId: ActionId.fromItemId(7371), value: QuiverBonus.Speed12 },\n\t\t{ actionId: ActionId.fromItemId(3605), value: QuiverBonus.Speed11 },\n\t\t{ actionId: ActionId.fromItemId(3573), value: QuiverBonus.Speed10 },\n\t],\n});\n\nexport const PetTypeInput = makePetTypeInputConfig(true);\n\nexport const PetUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHunter>({\n\tfieldName: 'petUptime',\n\tlabel: 'Pet Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which your pet will be alive.',\n\tpercent: true,\n});\n\nexport const SniperTrainingUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHunter>({\n\tfieldName: 'sniperTrainingUptime',\n\tlabel: 'Sniper Training Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which you will have the buff.',\n\tpercent: true,\n\tshowWhen: (player) => player.getEquippedItem(ItemSlot.ItemSlotLegs)?.rune?.id == HunterRune.RuneLegsSniperTraining,\n\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.gearChangeEmitter, player.specOptionsChangeEmitter]),\n});\n\nexport const HunterRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: RotationType.SingleTarget },\n\t\t\t\t{ name: 'AOE', value: RotationType.Aoe },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'sting',\n\t\t\tlabel: 'Sting',\n\t\t\tlabelTooltip: 'Maintains the selected Sting on the primary target.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'None', value: StingType.NoSting },\n\t\t\t\t{ name: 'Scorpid Sting', value: StingType.ScorpidSting },\n\t\t\t\t{ name: 'Serpent Sting', value: StingType.SerpentSting },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecHunter>) => player.getSimpleRotation().type == RotationType.SingleTarget,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'multiDotSerpentSting',\n\t\t\tlabel: 'Multi-Dot Serpent Sting',\n\t\t\tlabelTooltip: 'Casts Serpent Sting on multiple targets',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t],\n};\n","import { Player } from '../player.js';\nimport { Spec } from '../proto/common.js';\nimport { Hunter_Options_PetType as PetType } from '../proto/hunter.js';\nimport { ActionId } from '../proto_utils/action_id.js';\n\n\nimport * as InputHelpers from '../components/input_helpers.js';\n\nexport function makePetTypeInputConfig(_: boolean): InputHelpers.TypedIconEnumPickerConfig<Player<Spec.SpecHunter>, PetType> {\n\treturn InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, PetType>({\n\t\tfieldName: 'petType',\n\t\tnumColumns: 6,\n\t\t//label: includeLabel ? 'Pet' : '',\n\t\tvalues: [\n\t\t\t// TODO: Organize pets into phases maybe?\n\t\t\t{ value: PetType.PetNone, tooltip: 'No Pet' },\n\t\t\t{ actionId: ActionId.fromPetName('Cat'), tooltip: 'Cat', value: PetType.Cat },\n\t\t\t{ actionId: ActionId.fromPetName('Wind Serpent'), tooltip: 'Wind Serpent', value: PetType.WindSerpent },\n\t\t\t{ actionId: ActionId.fromPetName('Wolf'), tooltip: 'Wolf', value: PetType.Wolf },\n\t\t\t{ actionId: ActionId.fromPetName('Bat'), tooltip: 'Bat', value: PetType.Bat },\n\t\t\t{ actionId: ActionId.fromPetName('Bear'), tooltip: 'Bear', value: PetType.Bear },\n\t\t\t//{ actionId: ActionId.fromPetName('Bird of Prey'), tooltip: 'Bird of Prey', value: PetType.BirdOfPrey },\n\t\t\t{ actionId: ActionId.fromPetName('Boar'), tooltip: 'Boar', value: PetType.Boar },\n\t\t\t{ actionId: ActionId.fromPetName('Carrion Bird'), tooltip: 'Carrion Bird', value: PetType.CarrionBird },\n\t\t\t//{ actionId: ActionId.fromPetName('Chimaera'), tooltip: 'Chimaera (Exotic)', value: PetType.Chimaera },\n\t\t\t//{ actionId: ActionId.fromPetName('Core Hound'), tooltip: 'Core Hound (Exotic)', value: PetType.CoreHound },\n\t\t\t{ actionId: ActionId.fromPetName('Crab'), tooltip: 'Crab', value: PetType.Crab },\n\t\t\t{ actionId: ActionId.fromPetName('Crocolisk'), tooltip: 'Crocolisk', value: PetType.Crocolisk },\n\t\t\t//{ actionId: ActionId.fromPetName('Devilsaur'), tooltip: 'Devilsaur (Exotic)', value: PetType.Devilsaur },\n\t\t\t//{ actionId: ActionId.fromPetName('Dragonhawk'), tooltip: 'Dragonhawk', value: PetType.Dragonhawk },\n\t\t\t{ actionId: ActionId.fromPetName('Gorilla'), tooltip: 'Gorilla', value: PetType.Gorilla },\n\t\t\t{ actionId: ActionId.fromPetName('Hyena'), tooltip: 'Hyena', value: PetType.Hyena },\n\t\t\t{ actionId: ActionId.fromPetName('Raptor'), tooltip: 'Raptor', value: PetType.Raptor },\n\t\t\t{ actionId: ActionId.fromPetName('Scorpid'), tooltip: 'Scorpid', value: PetType.Scorpid },\n\t\t\t//{ actionId: ActionId.fromPetName('Serpent'), tooltip: 'Serpent', value: PetType.Serpent },\n\t\t\t//{ actionId: ActionId.fromPetName('Silithid'), tooltip: 'Silithid (Exotic)', value: PetType.Silithid },\n\t\t\t{ actionId: ActionId.fromPetName('Spider'), tooltip: 'Spider', value: PetType.Spider },\n\t\t\t//{ actionId: ActionId.fromPetName('Spirit Beast'), tooltip: 'Spirit Beast (Exotic)', value: PetType.SpiritBeast },\n\t\t\t//{ actionId: ActionId.fromPetName('Spore Bat'), tooltip: 'Spore Bat', value: PetType.SporeBat },\n\t\t\t{ actionId: ActionId.fromPetName('Tallstrider'), tooltip: 'Tallstrider', value: PetType.Tallstrider },\n\t\t\t{ actionId: ActionId.fromPetName('Turtle'), tooltip: 'Turtle', value: PetType.Turtle },\n\t\t],\n\t});\n}\n","import {\n\tConsumes,\n\tFlask,\n\tFood,\n\tSpec,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tHunter_Rotation as HunterRotation,\n\tHunter_Rotation_RotationType as RotationType,\n\tHunter_Rotation_StingType as StingType,\n\tHunter_Options as HunterOptions,\n\tHunter_Options_Ammo as Ammo,\n\tHunter_Options_PetType as PetType,\n} from '../core/proto/hunter.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport BlankGear from './gear_sets/blank.gear.json';\n\nimport BlankApl from './apls/blank.apl.json';\n//import MmApl from './apls/mm.apl.json';\n//import MmAdvApl from './apls/mm_advanced.apl.json';\n//import SvApl from './apls/sv.apl.json';\n//import SvAdvApl from './apls/sv_advanced.apl.json';\n//import AoeApl from './apls/aoe.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const GearBeastMasteryDefault = PresetUtils.makePresetGear('Blank', BlankGear, { talentTree: 0 })\nexport const GearMarksmanDefault = PresetUtils.makePresetGear('Blank', BlankGear, { talentTree: 1 })\nexport const GearSurvivalDefault = PresetUtils.makePresetGear('Blank', BlankGear, { talentTree: 2 })\n\nexport const DefaultSimpleRotation = HunterRotation.create({\n\ttype: RotationType.SingleTarget,\n\tsting: StingType.SerpentSting,\n\tmultiDotSerpentSting: true,\n});\n\nexport const ROTATION_PRESET_SIMPLE_DEFAULT = PresetUtils.makePresetSimpleRotation('Simple Default', Spec.SpecHunter, DefaultSimpleRotation);\nexport const ROTATION_PRESET_BM = PresetUtils.makePresetAPLRotation('BM', BlankApl, { talentTree: 0 });\nexport const ROTATION_PRESET_MM = PresetUtils.makePresetAPLRotation('MM', BlankApl, { talentTree: 1 });\nexport const ROTATION_PRESET_MM_ADVANCED = PresetUtils.makePresetAPLRotation('MM (Advanced)', BlankApl, { talentTree: 1 });\nexport const ROTATION_PRESET_SV = PresetUtils.makePresetAPLRotation('SV', BlankApl, { talentTree: 2 });\nexport const ROTATION_PRESET_SV_ADVANCED = PresetUtils.makePresetAPLRotation('SV (Advanced)', BlankApl, { talentTree: 2 });\nexport const ROTATION_PRESET_AOE = PresetUtils.makePresetAPLRotation('AOE', BlankApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\nexport const BeastMasteryTalents = {\n\tname: 'Beast Mastery',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '53000200501',\n\t}),\n};\n\nexport const MarksmanTalents = {\n\tname: 'Marksman',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-050515',\n\t}),\n};\n\nexport const SurvivalTalents = {\n\tname: 'Survival',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '--33502001101',\n\t}),\n};\n\nexport const DefaultOptions = HunterOptions.create({\n\tammo: Ammo.RazorArrow,\n\tpetType: PetType.WindSerpent,\n\tpetTalents: {},\n\tpetUptime: 1,\n});\n\nexport const BMDefaultOptions = HunterOptions.create({\n\tammo: Ammo.RazorArrow,\n\tpetType: PetType.Cat,\n\tpetTalents: {},\n\tpetUptime: 1,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskUnknown,\n\tfood: Food.FoodUnknown,\n});\n","import {\n\tClass,\n\tCooldowns,\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tRace,\n\tRaidBuffs,\n\tRangedWeaponType,\n\tSpec,\n\tStat, PseudoStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport {\n\tAPLAction,\n\tAPLListItem,\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport {\n\tHunter_Rotation as HunterRotation,\n\tHunter_Rotation_StingType as StingType,\n\tHunter_Rotation_RotationType,\n} from '../core/proto/hunter.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\nimport * as AplUtils from '../core/proto_utils/apl_utils.js';\nimport * as HunterInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecHunter, {\n\tcssClass: 'hunter-sim-ui',\n\tcssScheme: 'hunter',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\twarnings: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatRangedAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatMP5,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatRangedDps,\n\t],\n\t// Reference stat against which to calculate EP.\n\tepReferenceStat: Stat.StatRangedAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatAttackPower,\n\t\tStat.StatRangedAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatMP5,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecHunter>) => {\n\t\tlet stats = new Stats();\n\t\tstats = stats.addStat(Stat.StatMeleeCrit, player.getTalents().lethalShots * 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\n\t\tconst rangedWeapon = player.getEquippedItem(ItemSlot.ItemSlotRanged);\n\t\tif (rangedWeapon?.enchant?.effectId == 3608) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 40);\n\t\t}\n\t\tif (player.getRace() == Race.RaceDwarf && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeGun) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t}\n\t\tif (player.getRace() == Race.RaceTroll && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeBow) {\n\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t}\n\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.GearBeastMasteryDefault.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatStamina]: 0.5,\n\t\t\t[Stat.StatAgility]: 2.65,\n\t\t\t[Stat.StatIntellect]: 1.1,\n\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t[Stat.StatRangedAttackPower]: 1.0,\n\t\t\t[Stat.StatMeleeHit]: 2,\n\t\t\t[Stat.StatMeleeCrit]: 1.5,\n\t\t\t[Stat.StatMeleeHaste]: 1.39,\n\t\t\t[Stat.StatArmorPenetration]: 1.32,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatRangedDps]: 6.32,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default rotation settings.\n\t\tsimpleRotation: Presets.DefaultSimpleRotation,\n\t\t// Default talents.\n\t\ttalents: Presets.SurvivalTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\taspectOfTheLion: true,\n\t\t\tarcaneBrilliance: true,\n\t\t\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tbattleShout: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\thomunculi: 70, // 70% average uptime default\n\t\t\tfaerieFire: true,\n\t\t}),\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tHunterInputs.PetTypeInput,\n\t\tHunterInputs.WeaponAmmo,\n\t\tHunterInputs.QuiverInput,\n\t],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: HunterInputs.HunterRotationConfig,\n\tpetConsumeInputs: [\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.StaminaBuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tHunterInputs.PetUptime,\n\t\t\tHunterInputs.SniperTrainingUptime,\n\t\t\tOtherInputs.DistanceFromTarget,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.BeastMasteryTalents,\n\t\t\tPresets.MarksmanTalents,\n\t\t\tPresets.SurvivalTalents,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.ROTATION_PRESET_SIMPLE_DEFAULT,\n\t\t\tPresets.ROTATION_PRESET_BM,\n\t\t\tPresets.ROTATION_PRESET_MM,\n\t\t\tPresets.ROTATION_PRESET_MM_ADVANCED,\n\t\t\tPresets.ROTATION_PRESET_SV,\n\t\t\tPresets.ROTATION_PRESET_SV_ADVANCED,\n\t\t\tPresets.ROTATION_PRESET_AOE,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.GearBeastMasteryDefault,\n\t\t\tPresets.GearMarksmanDefault,\n\t\t\tPresets.GearSurvivalDefault,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecHunter>): APLRotation => {\n\t\tconst talentTree = player.getTalentTree();\n\t\tconst numTargets = player.sim.encounter.targets.length;\n\t\tif (numTargets >= 4) {\n\t\t\treturn Presets.ROTATION_PRESET_AOE.rotation.rotation!;\n\t\t} else if (talentTree == 0) {\n\t\t\treturn Presets.ROTATION_PRESET_BM.rotation.rotation!;\n\t\t} else if (talentTree == 1) {\n\t\t\treturn Presets.ROTATION_PRESET_MM.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ROTATION_PRESET_SV.rotation.rotation!;\n\t\t}\n\t},\n\n\tsimpleRotation: (player: Player<Spec.SpecHunter>, simple: HunterRotation, cooldowns: Cooldowns): APLRotation => {\n\t\tlet [prepullActions, actions] = AplUtils.standardCooldownDefaults(cooldowns);\n\n\t\tconst serpentSting = APLAction.fromJsonString(`{\"condition\":{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"remainingTime\":{}},\"rhs\":{\"const\":{\"val\":\"6s\"}}}},\"multidot\":{\"spellId\":{\"spellId\":49001},\"maxDots\":${simple.multiDotSerpentSting ? 3 : 1},\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}}`);\n\t\tconst scorpidSting = APLAction.fromJsonString(`{\"condition\":{\"auraShouldRefresh\":{\"auraId\":{\"spellId\":3043},\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":3043}}}`);\n\t\tconst trapWeave = APLAction.fromJsonString(`{\"condition\":{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":49067}}}}},\"castSpell\":{\"spellId\":{\"tag\":1,\"spellId\":49067}}}`);\n\t\tconst volley = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":58434}}}`);\n\t\tconst killShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":61006}}}`);\n\t\tconst aimedShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49050}}}`);\n\t\tconst multiShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49048}}}`);\n\t\tconst steadyShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49052}}}`);\n\t\tconst silencingShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":34490}}}`);\n\t\tconst chimeraShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":53209}}}`);\n\t\tconst blackArrow = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":63672}}}`);\n\t\tconst explosiveShot4 = APLAction.fromJsonString(`{\"condition\":{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":60053}}}}},\"castSpell\":{\"spellId\":{\"spellId\":60053}}}`);\n\t\tconst explosiveShot3 = APLAction.fromJsonString(`{\"condition\":{\"dotIsActive\":{\"spellId\":{\"spellId\":60053}}},\"castSpell\":{\"spellId\":{\"spellId\":60052}}}`);\n\t\t//const arcaneShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49045}}}`);\n\n\t\tconst talentTree = player.getTalentTree();\n\t\tif (simple.type == Hunter_Rotation_RotationType.Aoe) {\n\t\t\tactions.push(...[\n\t\t\t\tsimple.sting == StingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\tsimple.sting == StingType.SerpentSting ? serpentSting : null,\n\t\t\t\tvolley,\n\t\t\t].filter(a => a) as Array<APLAction>)\n\t\t} else if (talentTree == 0) { // BM\n\t\t\tactions.push(...[\n\t\t\t\tkillShot,\n\t\t\t\tsimple.sting == StingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\tsimple.sting == StingType.SerpentSting ? serpentSting : null,\n\t\t\t\taimedShot,\n\t\t\t\tmultiShot,\n\t\t\t\tsteadyShot,\n\t\t\t].filter(a => a) as Array<APLAction>)\n\t\t} else if (talentTree == 1) { // MM\n\t\t\tactions.push(...[\n\t\t\t\tsilencingShot,\n\t\t\t\tkillShot,\n\t\t\t\tsimple.sting == StingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\tsimple.sting == StingType.SerpentSting ? serpentSting : null,\n\t\t\t\tchimeraShot,\n\t\t\t\taimedShot,\n\t\t\t\tmultiShot,\n\t\t\t\tsteadyShot,\n\t\t\t].filter(a => a) as Array<APLAction>)\n\t\t} else if (talentTree == 2) { // SV\n\t\t\tactions.push(...[\n\t\t\t\tkillShot,\n\t\t\t\texplosiveShot4,\n\t\t\t\tsimple.sting == StingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\tsimple.sting == StingType.SerpentSting ? serpentSting : null,\n\t\t\t\tblackArrow,\n\t\t\t\taimedShot,\n\t\t\t\tmultiShot,\n\t\t\t\tsteadyShot,\n\t\t\t].filter(a => a) as Array<APLAction>)\n\t\t}\n\n\t\treturn APLRotation.create({\n\t\t\tprepullActions: prepullActions,\n\t\t\tpriorityList: actions.map(action => APLListItem.create({\n\t\t\t\taction: action,\n\t\t\t}))\n\t\t});\n\t},\n\t\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecHunter,\n\t\t\ttooltip: 'Beast Mastery Hunter',\n\t\t\tdefaultName: 'Beast Mastery',\n\t\t\ticonUrl: getSpecIcon(Class.ClassHunter, 0),\n\n\t\t\ttalents: Presets.BeastMasteryTalents.data,\n\t\t\tspecOptions: Presets.BMDefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearBeastMasteryDefault.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearBeastMasteryDefault.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecHunter,\n\t\t\ttooltip: 'Marksmanship Hunter',\n\t\t\tdefaultName: 'Marksmanship',\n\t\t\ticonUrl: getSpecIcon(Class.ClassHunter, 1),\n\n\t\t\ttalents: Presets.MarksmanTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearMarksmanDefault.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearMarksmanDefault.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecHunter,\n\t\t\ttooltip: 'Survival Hunter',\n\t\t\tdefaultName: 'Survival',\n\t\t\ticonUrl: getSpecIcon(Class.ClassHunter, 2),\n\n\t\t\ttalents: Presets.SurvivalTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearSurvivalDefault.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearSurvivalDefault.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class HunterSimUI extends IndividualSimUI<Spec.SpecHunter> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecHunter>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["WeaponAmmo","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","numColumns","values","value","Ammo","AmmoNone","tooltip","actionId","ActionId","fromItemId","RazorArrow","JaggedArrow","IceThreadedArrow","ThoriumHeadedArrow","Doomshot","SolidShot","AccurateSlugs","IceThreadedBullet","MithrilGyroShot","RockshardPellets","ThoriumShells","MiniatureCannonBalls","QuiverInput","extraCssClasses","color","QuiverBonus","QuiverNone","Speed15","Speed14","Speed13","Speed12","Speed11","Speed10","PetTypeInput","PetType","PetNone","fromPetName","Cat","WindSerpent","Wolf","Bat","Bear","Boar","CarrionBird","Crab","Crocolisk","Gorilla","Hyena","Raptor","Scorpid","Spider","Tallstrider","Turtle","PetUptime","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","percent","SniperTrainingUptime","showWhen","player","getEquippedItem","ItemSlot","ItemSlotLegs","rune","id","HunterRune","RuneLegsSniperTraining","changeEmitter","TypedEvent","onAny","gearChangeEmitter","specOptionsChangeEmitter","HunterRotationConfig","inputs","InputHelpers.makeRotationEnumInput","name","RotationType","SingleTarget","Aoe","StingType","NoSting","ScorpidSting","SerpentSting","getSimpleRotation","type","InputHelpers.makeRotationBooleanInput","rotationChangeEmitter","talentsChangeEmitter","GearBeastMasteryDefault","PresetUtils.makePresetGear","BlankGear","talentTree","GearMarksmanDefault","GearSurvivalDefault","DefaultSimpleRotation","HunterRotation","create","sting","multiDotSerpentSting","ROTATION_PRESET_SIMPLE_DEFAULT","PresetUtils.makePresetSimpleRotation","Spec","SpecHunter","ROTATION_PRESET_BM","PresetUtils.makePresetAPLRotation","BlankApl","ROTATION_PRESET_MM","ROTATION_PRESET_MM_ADVANCED","ROTATION_PRESET_SV","ROTATION_PRESET_SV_ADVANCED","ROTATION_PRESET_AOE","BeastMasteryTalents","data","SavedTalents","talentsString","MarksmanTalents","SurvivalTalents","DefaultOptions","HunterOptions","ammo","petType","petTalents","petUptime","BMDefaultOptions","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodUnknown","SPEC_CONFIG","registerSpecConfig","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStamina","StatIntellect","StatStrength","StatAgility","StatAttackPower","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatMP5","epPseudoStats","PseudoStat","PseudoStatRangedDps","epReferenceStat","displayStats","StatHealth","modifyDisplayStats","stats","Stats","addStat","getTalents","lethalShots","Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE","rangedWeapon","ItemSlotRanged","enchant","effectId","getRace","Race","RaceDwarf","item","rangedWeaponType","RangedWeaponType","RangedWeaponTypeGun","RaceTroll","RangedWeaponTypeBow","talents","defaults","gear","Presets.GearBeastMasteryDefault","epWeights","fromMap","consumes","Presets.DefaultConsumes","simpleRotation","Presets.DefaultSimpleRotation","Presets.SurvivalTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","aspectOfTheLion","arcaneBrilliance","powerWordFortitude","TristateEffect","TristateEffectImproved","giftOfTheWild","battleShout","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfWisdom","blessingOfMight","debuffs","Debuffs","homunculi","faerieFire","playerIconInputs","HunterInputs.PetTypeInput","HunterInputs.WeaponAmmo","HunterInputs.QuiverInput","rotationInputs","HunterInputs.HunterRotationConfig","petConsumeInputs","includeBuffDebuffInputs","BuffDebuffInputs.StaminaBuff","excludeBuffDebuffInputs","otherInputs","HunterInputs.PetUptime","HunterInputs.SniperTrainingUptime","OtherInputs.DistanceFromTarget","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.BeastMasteryTalents","Presets.MarksmanTalents","rotations","Presets.ROTATION_PRESET_SIMPLE_DEFAULT","Presets.ROTATION_PRESET_BM","Presets.ROTATION_PRESET_MM","Presets.ROTATION_PRESET_MM_ADVANCED","Presets.ROTATION_PRESET_SV","Presets.ROTATION_PRESET_SV_ADVANCED","Presets.ROTATION_PRESET_AOE","Presets.GearMarksmanDefault","Presets.GearSurvivalDefault","autoRotation","getTalentTree","sim","encounter","targets","length","rotation","simple","cooldowns","prepullActions","actions","AplUtils.standardCooldownDefaults","serpentSting","APLAction","fromJsonString","scorpidSting","volley","killShot","aimedShot","multiShot","steadyShot","silencingShot","chimeraShot","blackArrow","explosiveShot4","Hunter_Rotation_RotationType","push","filter","a","APLRotation","priorityList","map","action","APLListItem","raidSimPresets","spec","defaultName","iconUrl","getSpecIcon","Class","ClassHunter","Presets.BMDefaultOptions","defaultFactionRaces","Faction","Unknown","RaceUnknown","Alliance","RaceNightElf","Horde","RaceOrc","defaultGear","HunterSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}